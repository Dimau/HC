<?php
/* Страница администратора для отображения данных о конкретной заявке на просмотр и всех остальных заявках на данный объект недвижимости */

// Стартуем сессию с пользователем - сделать доступными переменные сессии
session_start();

// Подключаем нужные модели и представления
include 'models/DBconnect.php';
include 'models/GlobFunc.php';
include 'models/Logger.php';
include 'models/IncomingUser.php';
include 'views/View.php';

// Удалось ли подключиться к БД?
if (DBconnect::get() == FALSE) die('Ошибка подключения к базе данных (. Попробуйте зайти к нам немного позже.');

// Инициализируем модель для запросившего страницу пользователя
$incomingUser = new IncomingUser();

// Уточняем - имеет ли пользователь права админа.
$isAdmin = $incomingUser->isAdmin();

/*************************************************************************************
 * Проверяем - может ли данный пользователь просматривать данную страницу
 ************************************************************************************/

// Если пользователь не авторизирован, то пересылаем юзера на страницу авторизации
if (!$incomingUser->login()) {
	header('Location: login.php');
	exit();
}

// Если пользователь не является администратором, то доступ к странице ему запрещен - разавторизуем его и перекинем на главную (в идеале нужно перекидывать на login.php)
// Кроме того, проверяем, что у данного администратора есть право на поиск пользователей и вход в их Личные кабинеты
if (!$isAdmin['searchUser']) {
	header('Location: out.php');
	exit();
}

/*************************************************************************************
 * ПОЛУЧИМ GET ПАРАМЕТРЫ
 * Для защиты от XSS атаки и для использования в коде более простого имени для переменной
 ************************************************************************************/

// Идентификатор объекта, по которому нас интересуют заявки на просмотр
$propertyId = "";
if (isset($_GET['propertyId'])) $propertyId = intval(htmlspecialchars($_GET['propertyId'], ENT_QUOTES));

// Идентификатор заявки на просмотр, которая нас интересует
$requestToViewId = "";
if (isset($_GET['requestToViewId'])) $requestToViewId = intval(htmlspecialchars($_GET['requestToViewId'], ENT_QUOTES));

// Если в запросе не указан идентификатор объекта, то пересылаем пользователя на спец страницу
if ($propertyId == "" || $propertyId == 0) {
	header('Location: 404.html');
	exit();
}

/********************************************************************************
 * ПОЛУЧИМ ВСЕ ЗАЯВКИ НА ПРОСМОТР ЭТОГО ОБЪЕКТА ($propertyId)
 *******************************************************************************/

$allRequestsToView = DBconnect::getAllRequestToViewForProperties($propertyId);

/********************************************************************************
 * ПОЛУЧИМ СВЕДЕНИЯ ОБ АРЕНДАТОРАХ, ПОДАВШИХ ЗАЯВКИ НА ПРОСМОТР ЭТОГО ОБЪЕКТА ($propertyId)
 *******************************************************************************/

// Выделим идентификаторы всех арендаторов, отправивших заявки на просмотр
$allTenants = array();
foreach ($allRequestsToView as $value) {
	$allTenants[] = $value['tenantId'];
}

// Получим полные данные по всем этим арендаторам
$allTenants = DBconnect::getAllDataAboutCharacteristicUsers($allTenants);

// Дополним сведения о заявках на просмотр недостающими данными об их отправителях
for ($i = 0, $s = count($allRequestsToView); $i < $s; $i++) {
	foreach ($allTenants as $value) {
		if ($allRequestsToView[$i]['tenantId'] == $value['id']) {
			$allRequestsToView[$i]['name'] = $value['name'];
			$allRequestsToView[$i]['secondName'] = $value['secondName'];
			$allRequestsToView[$i]['surname'] = $value['surname'];
			break;
		}
	}
}

/********************************************************************************
 * ПОЛУЧИМ СВЕДЕНИЯ О САМОМ ОБЪЕКТЕ ($propertyId)
 *******************************************************************************/

// Мы получим массив массивов, в состав которого в нормальных условиях должен попасть только 1 массив
$property = DBconnect::getAllDataAboutCharacteristicProperties($propertyId);

// Если что-то не так - выдаем ошибку
if (!is_array($property) || count($property) != 1) {
	die("Ошибка получения данных об объекте недвижимости");
} else {
	$property = $property[0];
}

/********************************************************************************
 * ПОЛУЧИМ СВЕДЕНИЯ О СОБСТВЕННИКЕ ОБЪЕКТА ($propertyId)
 *******************************************************************************/

$user = DBconnect::getAllDataAboutCharacteristicUsers($property['userId']);

// Если что-то не так - выдаем ошибку
if (!is_array($user) || count($user) != 1) {
	die("Ошибка получения данных о собственнике недвижимости");
} else {
	$user = $user[0];
}

/********************************************************************************
 * ФОРМИРОВАНИЕ ПРЕДСТАВЛЕНИЯ (View)
 *******************************************************************************/

//$allRequestsToView	массив, каждый элемент которого представляет собой еще один массив параметров конкретной заявки на просмотр
//$property  массив, содержащий сведения об объекте недвижимости, по которому мы смотрим заявки
//$user  массив, содержащий сведения о собственнике объекта недвижимости, по которому мы смотрим заявки
//$requestToViewId

// Подсоединяем нужный основной шаблон
include "templates/" . "adminTemplates/templ_adminRequestToView.php";

/********************************************************************************
 * Закрываем соединение с БД
 *******************************************************************************/

DBconnect::closeConnectToDB();